# 开发环境配置文件
"""
Django settings for meiduo_mall project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os, sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 追加导包路径指向apps包
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-_brr#3n7c+i=)k)ksh8+g#j32-l6h55jzawa#9m5!^p6$o1u)e"

# SECURITY WARNING: don't run with debug turned on in production!
# 开发者模式,上线之后改为False
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'users',    # 用户模块
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "meiduo_mall.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2", # 配置Jinja2模版引擎
        "DIRS": [os.path.join(BASE_DIR, 'templates')], # 配置模版文件加载的路径
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            
            # 补充jinja2模版引擎环境
            'environment': 'meiduo_mall.utils.jinja2_env.jinja2_environment'
        },
    },

    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
    
]

WSGI_APPLICATION = "meiduo_mall.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# 配置网络数据库
DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": BASE_DIR / "db.sqlite3",
    # }
    # 修改数据库为mysql
    "default": {
        "ENGINE": "django.db.backends.mysql", # 数据库引擎
        "HOST": '192.168.1.102', # 数据库主机
        "PORT": 3306,   # 数据库端口
        "USER": 'root',    # 数据库用户名
        "PASSWORD": '123456',   # 数据库密码
        "NAME": 'meiduo_mall'   # 数据库名字
    }
}

# 配置缓存数据库--redis数据库
CACHES = {
    "default": {    # 默认缓存到0号库
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://39.98.194.30:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
     "session": {   # session缓存到1号库
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://39.98.194.30:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },

    }
}
# session缓存到1号库
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
# 指定加载静态文件的路由前缀
STATIC_URL = "static/"
# 配置静态文件加载路径
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"



"""
配置工程日志
"""
# 定义三种日志输出格式
standard_format = '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]' \
                  '[%(levelname)s][%(message)s]' #其中name为getlogger指定的名字
simple_format = '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'

# log配置字典
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {'format': standard_format},
        'simple': {'format': simple_format},
    },
    'filters': {    # 对日志进行过滤
        'require_debug_true': {     # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        #打印到终端的日志,日志级别等级：CRITICAL > ERROR > WARNING > INFO > DEBUG
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',  # 打印到屏幕
            'formatter': 'simple'
        },
        #打印到文件的日志,收集info及以上的日志
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件
            'formatter': 'verbose',
            'filename': os.path.join(os.path.dirname(BASE_DIR), 'logs/meiduo.log'),  # 日志文件
            'maxBytes': 1024*1024*50,  # 日志大小 50M
            'backupCount': 100,
            'encoding': 'utf-8',  # 日志文件的编码，再也不用担心中文log乱码了
        },
    },
    'loggers': {    # 日志器
        #logging.getLogger(__name__)拿到的logger配置
        'django': {     # 定义一个名为django的日志器
            'handlers': ['console', 'file'],  # 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕
            'level': 'INFO',
            'propagate': True,  # 向上（更高level的logger）传递
        },
    },
}

"""
指定自定义的用户模型类,值的语法: 子应用.用户模型类
"""
AUTH_USER_MODEL = 'users.User'